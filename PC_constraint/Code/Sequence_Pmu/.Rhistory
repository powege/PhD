### IMPORT
in_seq_path <- paste0(in_file_path, chr[i], ".txt")
df.seq <- fread(in_seq_path)
# df.snp <- fread("/Volumes/Untitled/PC_constraint/Paper/Data/Ancestral_mutant/M_ancestral_mutant_SNP_chr19.txt")
colnames(df.seq) <- c("POS", "ANCESTRAL", "MUTANT")
# colnames(df.snp) <- c("POS", "ANCESTRAL", "MUTANT")
### Split into vectors of sequential POS
ANCESTRAL <- split(df.seq$ANCESTRAL, cumsum(c(TRUE, diff(df.seq$POS)!=1)))
MUTANT <- split(df.seq$MUTANT, cumsum(c(TRUE, diff(df.seq$POS)!=1)))
### Remove vectors with bases < 7
ANCESTRAL <- ANCESTRAL[lapply(ANCESTRAL, length) >= 7]
MUTANT <- MUTANT[lapply(MUTANT, length) >= 7]
### Count 3-mers in ancestral sequence
kmer7_totals <- lapply(ANCESTRAL, count_7mer, k7_all = k7_all)
# sum all counts in list
k7_total_list[[i]] <- rowSums(sapply(kmer7_totals, `[[`, 2), na.rm = TRUE)
### Count the 3-mer substitutions with mutant sequence
kmer7_sub_totals <- list()
for (j in 1:length(ANCESTRAL)){
kmer7_sub_totals[[j]] <- count_7mer_sub(anc.SEQ = ANCESTRAL[[j]],
mu.SEQ = MUTANT[[j]],
k7_mu_all = k7_mu_all)
# print(j)
}
# sum all counts in list
k7_mu_count_list[[i]] <- rowSums(sapply(kmer7_sub_totals, `[[`, 3), na.rm = TRUE)
print(paste("chr", chr[i], "done!"))
}
# Sum total kmer across chromosomes
k7_total <- do.call(cbind, k7_total_list)
k7_total <- apply(k7_total, 1, sum, na.rm = T)
k7_total <- data.frame(k7_from = k7_all$k7_from,
k7_from_N = k7_total)
# Sum total kmer changes across chromosomes
k7_mu_total <- do.call(cbind, k7_mu_count_list)
k7_mu_total <- apply(k7_mu_total, 1, sum, na.rm = T)
k7_mu_total <- data.frame(k7_from = k7_mu_all$k7_from,
k7_to = k7_mu_all$k7_to,
k7_mu_N = k7_mu_total)
### Calculate relative mu rates
k7_out <- merge(k7_mu_total, k7_total, all = T)
k7_out$p_any_snp_given_k7 <- NA
for (ii in 1:nrow(k7_out)){
k7_out$p_any_snp_given_k7[ii] <- sum(k7_out$k7_mu_N[k7_out$k7_from == k7_out$k7_from[ii]])/k7_out$k7_from_N[ii]
}
k7_out$p_snp_given_k7 <- NA
for (ii in 1:nrow(k7_out)){
k7_out$p_snp_given_k7[ii] <- k7_out$k7_mu_N[ii]/sum(k7_out$k7_mu_N[k7_out$k7_from == k7_out$k7_from[ii]])
}
k7_out$k7_mu_rr <- NA
for (ii in 1:nrow(k7_out)){
k7_out$k7_mu_rr[ii] <- k7_out$k7_mu_N[ii]/k7_out$k7_from_N[ii]
}
print(paste("CHROMOSOME", chr[i], "DONE!", sep = " "))
return(k7_out)
}
chr <- 21
in_file_path   <- "/Volumes/HarEx/PC_constraint/Paper/Data/Ancestral_mutant/H_ancestral_mutant_SEQ_chr"
k7_out <- k7_mu_rr(chr, in_file_path)
# Initiate output lists
k7_mu_count_list <- list()
k7_total_list <- list()
# Identify all possible 3-mer substitutions
k7_mu_all <- k7mer_changes(7)
k7_all <- data.table(k7_from = unique(k7_mu_all$k7_from))
View(k7_mu_all)
i <- 1
### IMPORT
in_seq_path <- paste0(in_file_path, chr[i], ".txt")
df.seq <- fread(in_seq_path)
# df.snp <- fread("/Volumes/Untitled/PC_constraint/Paper/Data/Ancestral_mutant/M_ancestral_mutant_SNP_chr19.txt")
colnames(df.seq) <- c("POS", "ANCESTRAL", "MUTANT")
### Split into vectors of sequential POS
ANCESTRAL <- split(df.seq$ANCESTRAL, cumsum(c(TRUE, diff(df.seq$POS)!=1)))
MUTANT <- split(df.seq$MUTANT, cumsum(c(TRUE, diff(df.seq$POS)!=1)))
### Remove vectors with bases < 7
ANCESTRAL <- ANCESTRAL[lapply(ANCESTRAL, length) >= 7]
MUTANT <- MUTANT[lapply(MUTANT, length) >= 7]
### Count 3-mers in ancestral sequence
kmer7_totals <- lapply(ANCESTRAL, count_7mer, k7_all = k7_all)
# sum all counts in list
k7_total_list[[i]] <- rowSums(sapply(kmer7_totals, `[[`, 2), na.rm = TRUE)
### Count the 3-mer substitutions with mutant sequence
kmer7_sub_totals <- list()
for (j in 1:length(ANCESTRAL)){
kmer7_sub_totals[[j]] <- count_7mer_sub(anc.SEQ = ANCESTRAL[[j]],
mu.SEQ = MUTANT[[j]],
k7_mu_all = k7_mu_all)
# print(j)
}
# sum all counts in list
k7_mu_count_list[[i]] <- rowSums(sapply(kmer7_sub_totals, `[[`, 3), na.rm = TRUE)
View(kmer7_sub_totals)
test <- lapply(nrow, kmer7_sub_totals)
test <- lapply(kmer7_sub_totals, nrow)
View(test)
test <- unlist(lapply(kmer7_sub_totals, nrow))
summary(test)
whcih(test == 49153)
test[1:3]
whcih(test %in% 49153)
which(test %in% 49153)
x <- kmer7_sub_totals[[187]]
View(x)
j = 187
anc.SEQ = ANCESTRAL[[j]]
mu.SEQ = MUTANT[[j]]
k7_mu_all = k7_mu_all
# identify SNV POS
SNV.POS <- which(anc.SEQ != mu.SEQ)
# remove SNV at fist or last base
rm.id <- c((1:3), ((length(anc.SEQ)-2):length(anc.SEQ)))
### FUNCTION that counts k7mer subsetitutions from ancestral to mutant sequence
count_7mer_sub <- function(anc.SEQ, mu.SEQ, k7_mu_all){
# identify SNV POS
SNV.POS <- which(anc.SEQ != mu.SEQ)
# remove SNV at fist or last base
rm.id <- c((1:3), ((length(anc.SEQ)-2):length(anc.SEQ)))
SNV.POS <- SNV.POS[!SNV.POS %in% rm.id]
if (length(SNV.POS) != 0){
# identify ancestral kmer
b1 <- anc.SEQ[SNV.POS - 3]
b2 <- anc.SEQ[SNV.POS - 2]
b3 <- anc.SEQ[SNV.POS - 1]
b4 <- anc.SEQ[SNV.POS]
b5 <- anc.SEQ[SNV.POS + 1]
b6 <- anc.SEQ[SNV.POS + 2]
b7 <- anc.SEQ[SNV.POS + 3]
tri.from <- paste(b1, b2, b3, b4, b5, b6, b7, sep = "")
# identify mutant kmer
b1 <- anc.SEQ[SNV.POS - 3]
b2 <- anc.SEQ[SNV.POS - 2]
b3 <- anc.SEQ[SNV.POS - 1]
b4 <- mu.SEQ[SNV.POS]
b5 <- anc.SEQ[SNV.POS + 1]
b6 <- anc.SEQ[SNV.POS + 2]
b7 <- anc.SEQ[SNV.POS + 3]
tri.to <- paste(b1, b2, b3, b4, b5, b6, b7, sep = "")
# remove all indicies in tri.from and tri.to that contain chrs other than ACGT or nchar != 7
# tri.to <- tri.to[!grepl("-", tri.to)]
mu.count.temp <- data.frame(tri.from, tri.to)
mu.count.temp <- data.frame(table(mu.count.temp))
mu.count.temp <- mu.count.temp[mu.count.temp$Freq != 0, ]
colnames(mu.count.temp) <- c("k7_from", "k7_to", "count")
mu.count <- merge(k7_mu_all, mu.count.temp, all = T)
return(mu.count)
} else {
k7_mu_all$count <- 0
return(k7_mu_all)
}
}
### Count the 3-mer substitutions with mutant sequence
kmer7_sub_totals <- list()
for (j in 1:length(ANCESTRAL)){
kmer7_sub_totals[[j]] <- count_7mer_sub(anc.SEQ = ANCESTRAL[[j]],
mu.SEQ = MUTANT[[j]],
k7_mu_all = k7_mu_all)
# print(j)
}
# sum all counts in list
k7_mu_count_list[[i]] <- rowSums(sapply(kmer7_sub_totals, `[[`, 3), na.rm = TRUE)
x <- k7_mu_count_list[[1]]
summary(x)
setwd("~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Code/Sequence_Pmu")
h <- fread("../../Data/Mu_rates/H_3mer_mu_rate.table")
m <- fread("../../Data/Mu_rates/M_3mer_mu_rate.table")
plot(h$k3_mu_rr, m$k3_mu_rr)
cor.test(h$k3_mu_rr, m$k3_mu_rr)
h2 <- fread("../../../Transfer/Data/Human/H_mutation_rate/H_ExAC_tri_mu_rate.table")
cor.test(h$k3_mu_rr, h2$mu_snp)
t.test(h$k3_mu_rr, m$k3_mu_rr, paired = T)
# mutation probabiliy table
RT <- fread("~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Mu_rates/H_3mer_mu_rate.table")
# mutation coding table
CT <- fread("~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Mu_rates/AA_mutation_table.csv")
View(CT)
rm(list = ls())
graphics.off()
# library(pegas)
# library(vcfR)
# library(seqinr)
# require(plyr)
library(biomaRt)
library(data.table)
H_tran.file <- "~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/SNV_counts/1000GP_canPC_SNV_counts.txt"
H_seq.file <- "~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Ensembl/H_canPC_SEQ_QCed.csv"
H_rem.file <- "~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Ensembl/H_canPC_SEQ_removed.csv"
H_canT <- fread(H_tran.file)
H_ensembl <- useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
H_seq <- getBM(attributes=c('chromosome_name',
'external_gene_name',
'ensembl_gene_id',
'ensembl_transcript_id',
'cds_length',
'coding'),
filters = c('chromosome_name',
'biotype',
'ensembl_transcript_id'),
values = list(as.character(c(1:22, "X")),
"protein_coding",
H_canT$ensembl_transcript_id),
mart = H_ensembl)
H_removed <- data.frame()
ncod <- H_seq$cds_length/3
rm.id <- which(ncod%%1!=0)
if (length(rm.id) != 0){
H_seq <- H_seq[-rm.id,]
H_removed <- rbind(H_removed, H_seq[rm.id,])
}
rm.id <- which(H_seq$cds_length<9)
if (length(rm.id) != 0){
H_seq <- H_seq[-rm.id,]
H_removed <- rbind(H_removed, H_seq[rm.id,])
}
rm.id <- grep('[^ATGC]', H_seq$coding)
if (length(rm.id) != 0){
H_seq <- H_seq[-rm.id,]
H_removed <- rbind(H_removed, H_seq[rm.id,])
}
c1 <- substring(H_seq$coding, 1, 3)
rm.id <- which(c1 != "ATG")
if (length(rm.id) != 0){
H_seq <- H_seq[-rm.id,]
H_removed <- rbind(H_removed, H_seq[rm.id,])
}
cn <- substring(H_seq$coding, H_seq$cds_length-2, H_seq$cds_length)
rm.id <- which(cn != "TAG" & cn != "TAA" & cn != "TGA")
if (length(rm.id) != 0){
H_seq <- H_seq[-rm.id,]
H_removed <- rbind(H_removed, H_seq[rm.id,])
}
fwrite(H_removed, H_rem.file)
fwrite(H_seq, H_seq.file)
rm(list=ls())
graphics.off()
### FUNCTION that splits string into vector of trinucleotides
## INPUT: character string
## OUTPUT: vector of trinucleotide character strings
three_split <- function(sequence){
vec <- strsplit(sequence, "")[[1]]
out <- rep(NA, nchar(sequence)-2)
for (i in 1:(nchar(sequence)-2)){
out[i] <- paste0(vec[i], vec[i+1], vec[i+2])
}
return(out)
}
### FUNCTION that splits string into list of codons with adjasent bases (ie base, codon, base)
## INPUT: character string (multiple of 3, including start and stop codons)
## OUTPUT: list of codons with adjasent bases (character string)
five_split <- function(sequence){
vec <- strsplit(sequence, "")[[1]]
vec <- vec[3:(length(vec)-2)]
out <- list()
for (i in 1:length(vec)){
if(i %% 3 == 0){
out[[i/3]] <- paste(vec[(i-2):(i+2)], collapse = "")
}
}
return(out)
}
### FUNCTION that calculates the sequence specific probability of synonymous,
### missense, and nonsense mutations, based on a trinucleotide mutation rate table
## INPUT: CT = Mutation table with all possible codon to codon point mutations
##            "Codon_from","Codon_to","AA_from","AA_to","Mutation_type"
##        RT = Mutation rate table
## sequence = genetic sequence string (char)
## OUTPUT: Named vector with probability of each mutation type (P_syn, P_mis, P_non)
Moaning_Myrtle <- function(fivebase, CT, RT){
codon <- substring(fivebase, 2, 4)
triplets <- three_split(fivebase)
# table of potential base changes and the coding consequence
# Codon_from; Codon_to, AA_from; AA_to
df1 <- subset(CT, CT$Codon_from == codon)
df1$seq <- fivebase
# Identify first, second, and third bases in codon
B1 <- strsplit(codon, "")[[1]][1]
B2 <- strsplit(codon, "")[[1]][2]
B3 <- strsplit(codon, "")[[1]][3]
# create a dataframe of sequence specific mutation probabilities
df2 <- data.frame()
for ( i in 1:length(triplets)){
sub <- subset(RT, RT$from == triplets[i])
sub$from <- codon
if (i == 1){
sub$to <- substring(sub$to, 2)
sub$to <- paste0(sub$to, B3)
}
if (i == 3){
sub$to <- substr(sub$to,1,nchar(as.character(sub$to))-1)
sub$to <- paste0(B1, sub$to)
}
df2 <- rbind(df2, sub)
}
df1 <- df1[order(df1$Codon_to),]
df2 <- df2[order(df2$to),]
df <- cbind(df1, df2)
for (i in 1:nrow(df)){
syn <- sum(df$mu_snp[df$Mutation_type == "syn"])
mis <- sum(df$mu_snp[df$Mutation_type == "mis"])
non <- sum(df$mu_snp[df$Mutation_type == "non"])
}
output <- c(syn, mis, non)
names(output) <- c("p_syn", "p_mis", "p_non")
return(output)
}
alakazam <- function(gene.seq, CT, RT){
# split sequence into codons +- 1bp
codons <- five_split(gene.seq)
# apply Moaning Myrtle to all codons +- 1bp
p_list <- lapply(codons, Moaning_Myrtle, CT=CT, RT=RT)
# sum all probabilites in list for each mutation type
out <- Reduce(`+`, p_list)
return(out)
}
# mutation probabiliy table
RT <- fread("~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Mu_rates/H_3mer_mu_rate.table")
# mutation coding table
CT <- fread("~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Mu_rates/AA_mutation_table.csv")
# transcript sequence
seq <- fread("~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Ensembl/H_canPC_SEQ_QCed.csv")
View(seq)
# output <- alakazam(gene.seq = df$coding[1], CT = CT, RT = RT)
input <- as.list(seq$coding)
# test
gene.seq = input[[1]]
codons <- five_split(gene.seq)
fivebase = codons[[1]]
codon <- substring(fivebase, 2, 4)
triplets <- three_split(fivebase)
# table of potential base changes and the coding consequence
# Codon_from; Codon_to, AA_from; AA_to
df1 <- subset(CT, CT$Codon_from == codon)
df1$seq <- fivebase
# Identify first, second, and third bases in codon
B1 <- strsplit(codon, "")[[1]][1]
B2 <- strsplit(codon, "")[[1]][2]
B3 <- strsplit(codon, "")[[1]][3]
i <- 1
sub <- subset(RT, RT$k3_from == triplets[i])
sub$k3_from <- codon
df2 <- rbind(df2, sub)
# create a dataframe of sequence specific mutation probabilities
df2 <- data.frame()
df2 <- rbind(df2, sub)
df <- cbind(df1, df2)
### FUNCTION that calculates the sequence specific probability of synonymous,
### missense, and nonsense mutations, based on a trinucleotide mutation rate table
## INPUT: CT = Mutation table with all possible codon to codon point mutations
##            "Codon_from","Codon_to","AA_from","AA_to","Mutation_type"
##        RT = Mutation rate table
## sequence = genetic sequence string (char)
## OUTPUT: Named vector with probability of each mutation type (P_syn, P_mis, P_non)
Moaning_Myrtle <- function(fivebase, CT, RT){
codon <- substring(fivebase, 2, 4)
triplets <- three_split(fivebase)
# table of potential base changes and the coding consequence
# Codon_from; Codon_to, AA_from; AA_to
df1 <- subset(CT, CT$Codon_from == codon)
df1$seq <- fivebase
# Identify first, second, and third bases in codon
B1 <- strsplit(codon, "")[[1]][1]
B2 <- strsplit(codon, "")[[1]][2]
B3 <- strsplit(codon, "")[[1]][3]
# create a dataframe of sequence specific mutation probabilities
df2 <- data.frame()
for ( i in 1:length(triplets)){
sub <- subset(RT, RT$k3_from == triplets[i])
sub$k3_from <- codon
if (i == 1){
sub$k3_to <- substring(sub$k3_to, 2)
sub$k3_to <- paste0(sub$k3_to, B3)
}
if (i == 3){
sub$k3_to <- substr(sub$k3_to, 1, nchar(as.character(sub$k3_to))-1)
sub$k3_to <- paste0(B1, sub$k3_to)
}
df2 <- rbind(df2, sub)
}
df1 <- df1[order(df1$Codon_to),]
df2 <- df2[order(df2$k3_to),]
df <- cbind(df1, df2)
for (i in 1:nrow(df)){
syn <- sum(df$k3_mu_rr[df$Mutation_type == "syn"])
mis <- sum(df$k3_mu_rr[df$Mutation_type == "mis"])
non <- sum(df$k3_mu_rr[df$Mutation_type == "non"])
}
output <- c(syn, mis, non)
names(output) <- c("p_syn", "p_mis", "p_non")
return(output)
}
# test
# gene.seq = input[[1]]
# codons <- five_split(gene.seq)
# fivebase = codons[[1]]
input <- input[[1:3]]
# test
# gene.seq = input[[1]]
# codons <- five_split(gene.seq)
# fivebase = codons[[1]]
test <- input[1:3]
# test
# gene.seq = input[[1]]
# codons <- five_split(gene.seq)
# fivebase = codons[[1]]
input <- input[1:3]
start_time <- Sys.time()
output <- lapply(input, alakazam, CT = CT, RT = RT)
end_time <- Sys.time()
end_time - start_time
View(output)
# append to df
df <- cbind(data.frame(ensembl_transcript_id = seq$ensembl_transcript_id),
as.data.frame(do.call(rbind, output)))
View(df)
rm(list=ls())
graphics.off()
### FUNCTION that splits string into vector of trinucleotides
## INPUT: character string
## OUTPUT: vector of trinucleotide character strings
three_split <- function(sequence){
vec <- strsplit(sequence, "")[[1]]
out <- rep(NA, nchar(sequence)-2)
for (i in 1:(nchar(sequence)-2)){
out[i] <- paste0(vec[i], vec[i+1], vec[i+2])
}
return(out)
}
### FUNCTION that splits string into list of codons with adjasent bases (ie base, codon, base)
## INPUT: character string (multiple of 3, including start and stop codons)
## OUTPUT: list of codons with adjasent bases (character string)
five_split <- function(sequence){
vec <- strsplit(sequence, "")[[1]]
vec <- vec[3:(length(vec)-2)]
out <- list()
for (i in 1:length(vec)){
if(i %% 3 == 0){
out[[i/3]] <- paste(vec[(i-2):(i+2)], collapse = "")
}
}
return(out)
}
### FUNCTION that calculates the sequence specific probability of synonymous,
### missense, and nonsense mutations, based on a trinucleotide mutation rate table
## INPUT: CT = Mutation table with all possible codon to codon point mutations
##            "Codon_from","Codon_to","AA_from","AA_to","Mutation_type"
##        RT = Mutation rate table
## sequence = genetic sequence string (char)
## OUTPUT: Named vector with probability of each mutation type (P_syn, P_mis, P_non)
Moaning_Myrtle <- function(fivebase, CT, RT){
codon <- substring(fivebase, 2, 4)
triplets <- three_split(fivebase)
# table of potential base changes and the coding consequence
# Codon_from; Codon_to, AA_from; AA_to
df1 <- subset(CT, CT$Codon_from == codon)
df1$seq <- fivebase
# Identify first, second, and third bases in codon
B1 <- strsplit(codon, "")[[1]][1]
B2 <- strsplit(codon, "")[[1]][2]
B3 <- strsplit(codon, "")[[1]][3]
# create a dataframe of sequence specific mutation probabilities
df2 <- data.frame()
for ( i in 1:length(triplets)){
sub <- subset(RT, RT$k3_from == triplets[i])
sub$k3_from <- codon
if (i == 1){
sub$k3_to <- substring(sub$k3_to, 2)
sub$k3_to <- paste0(sub$k3_to, B3)
}
if (i == 3){
sub$k3_to <- substr(sub$k3_to, 1, nchar(as.character(sub$k3_to))-1)
sub$k3_to <- paste0(B1, sub$k3_to)
}
df2 <- rbind(df2, sub)
}
df1 <- df1[order(df1$Codon_to),]
df2 <- df2[order(df2$k3_to),]
df <- cbind(df1, df2)
for (i in 1:nrow(df)){
syn <- sum(df$k3_mu_rr[df$Mutation_type == "syn"])
mis <- sum(df$k3_mu_rr[df$Mutation_type == "mis"])
non <- sum(df$k3_mu_rr[df$Mutation_type == "non"])
}
output <- c(syn, mis, non)
names(output) <- c("p_syn", "p_mis", "p_non")
return(output)
}
alakazam <- function(gene.seq, CT, RT){
# split sequence into codons +- 1bp
codons <- five_split(gene.seq)
# apply Moaning Myrtle to all codons +- 1bp
p_list <- lapply(codons, Moaning_Myrtle, CT=CT, RT=RT)
# sum all probabilites in list for each mutation type
out <- Reduce(`+`, p_list)
return(out)
}
# mutation probabiliy table
H_RT <- fread("~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Mu_rates/H_3mer_mu_rate.table")
M_RT <- fread("~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Mu_rates/M_3mer_mu_rate.table")
# mutation coding table
CT <- fread("~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Mu_rates/AA_mutation_table.csv")
# transcript sequence
H_seq <- fread("~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Ensembl/H_canPC_SEQ_QCed.csv")
M_seq <- fread("~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Ensembl/M_canPC_SEQ_QCed.csv")
### FORMAT
H_input <- as.list(H_seq$coding)
M_input <- as.list(M_seq$coding)
### RUN
H_output <- lapply(H_input, alakazam, CT = CT, RT = H_RT)
M_output <- lapply(M_input, alakazam, CT = CT, RT = M_RT)
rm(list=ls())
graphics.off()
library(data.table)
