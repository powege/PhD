cor.test(x$k3_from_N, y$n_kmer)
plot(x$k3_from_N, y$n_kmer)
colnames(x)
colnames(y)
colnames(x) <- c("from", "to", colnames(x)[3:7])
View(x)
z <- merge(x, y)
View(z)
### test
allignment_in_path = "/Volumes/Untitled/PC_constraint/Paper/Data/Ensembl_alignments/"
annotation_in_path = "~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/VEP/Formatted_output/"
allignment_in_file = "Human_chimpanzee_alignment_chr"
annotation_in_file = "H_1000GP_QCed_VEP_all_chr"
seq_out_path = "/Volumes/Untitled/PC_constraint/Paper/Data/Ancestral_mutant/"
SNV_out_path = "/Volumes/Untitled/PC_constraint/Paper/Data/Ancestral_mutant/"
seq_out_file = "H_ancestral_mutant_SEQ_chr"
SNV_out_file = "H_ancestral_mutant_SNP_chr"
exon.pos = H_exon.pos
chr = 21
colnames_ant =  c("CHROM", "POS", "ID", "REF", "ALT")
### RUN FOR HUMAN
H_exon.pos <- fread("~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Ensembl/H_exon_POS.csv")
exon.pos = H_exon.pos
# sequence allignment
allignment_file_path <- paste0(allignment_in_path, allignment_in_file, chr, ".txt")
allignment <- fread(allignment_file_path)
# annotations
ant_file_path <- paste0(annotation_in_path, annotation_in_file, chr, ".txt")
ant <- fread(ant_file_path)
# colnames
colnames(allignment) <- c("POS", "REF", "SPEC")
colnames(ant) <- colnames_ant
# convert "" to "-"
allignment$REF[allignment$REF == ""] <- "-"
allignment$SPEC[allignment$SPEC == ""] <- "-"
## cut exons from df sequence
exon.pos <- subset(exon.pos, exon.pos$chromosome_name == chr)
colnames_ant =  c("CHROM", "POS", "ID", "REF", "ALT", "QUAL", "FILTER", "AC", "Gene", "Feature", "Feature_type",
"Consequence", "IMPACT", "SYMBOL", "SYMBOL_SOURCE", "BIOTYPE", "CANONICAL", "CCDS", "AF")
# sequence allignment
allignment_file_path <- paste0(allignment_in_path, allignment_in_file, chr, ".txt")
allignment <- fread(allignment_file_path)
# annotations
ant_file_path <- paste0(annotation_in_path, annotation_in_file, chr, ".txt")
ant <- fread(ant_file_path)
### FORMAT
# colnames
colnames(allignment) <- c("POS", "REF", "SPEC")
colnames(ant) <- colnames_ant
# # convert NA to "-"
# allignment$REF[is.na(allignment$REF)] <- "-"
# allignment$SPEC[is.na(allignment$SPEC)] <- "-"
# convert "" to "-"
allignment$REF[allignment$REF == ""] <- "-"
allignment$SPEC[allignment$SPEC == ""] <- "-"
## cut exons from df sequence
exon.pos <- subset(exon.pos, exon.pos$chromosome_name == chr)
# creat list of exon sequences (vectors)
exon.pos.list <- list()
for (i in 1:nrow(exon.pos)){
exon.pos.list[[i]] <- seq(from = exon.pos$exon_chrom_start[i], to = exon.pos$exon_chrom_end[i])
}
exon.pos.list <- unlist(exon.pos.list)
# cut all positions within exons
seq.exon.cut <- allignment$POS[!allignment$POS %in% exon.pos.list]
seq.exon.cut <- data.table(POS = seq.exon.cut)
allignment <- allignment[seq.exon.cut, on = "POS", nomatch = 0]
rm(seq.exon.cut)
## cut exon POS from annotations
ant <- ant[, c("POS", "REF", "ALT"), with = FALSE]
test1 <- allignment[allignment$POS %in% ant$POS,]
test2 <- ant[ant$POS %in% test1$POS,]
test3 <- cbind(test1, test2)
test <- ant[allignment, on = c("POS", "REF"), nomatch=0]
head(test3)
tail(test3)
View(test3)
### test
allignment_in_path = "/Volumes/Untitled/PC_constraint/Paper/Data/Ensembl_alignments/"
annotation_in_path = "~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/VEP/Formatted_output/"
allignment_in_file = "Human_chimpanzee_alignment_chr"
annotation_in_file = "H_1000GP_QCed_VEP_all_chr"
seq_out_path = "/Volumes/Untitled/PC_constraint/Paper/Data/Ancestral_mutant/"
SNV_out_path = "/Volumes/Untitled/PC_constraint/Paper/Data/Ancestral_mutant/"
seq_out_file = "H_ancestral_mutant_SEQ_chr"
SNV_out_file = "H_ancestral_mutant_SNP_chr"
exon.pos = H_exon.pos
chr = 22
colnames_ant =  c("CHROM", "POS", "ID", "REF", "ALT", "QUAL", "FILTER", "AC", "Gene", "Feature", "Feature_type",
"Consequence", "IMPACT", "SYMBOL", "SYMBOL_SOURCE", "BIOTYPE", "CANONICAL", "CCDS", "AF")
allignment_file_path <- paste0(allignment_in_path, allignment_in_file, chr, ".txt")
allignment <- fread(allignment_file_path)
# annotations
ant_file_path <- paste0(annotation_in_path, annotation_in_file, chr, ".txt")
ant <- fread(ant_file_path)
### FORMAT
# colnames
colnames(allignment) <- c("POS", "REF", "SPEC")
colnames(ant) <- colnames_ant
# # convert NA to "-"
# allignment$REF[is.na(allignment$REF)] <- "-"
# allignment$SPEC[is.na(allignment$SPEC)] <- "-"
# convert "" to "-"
allignment$REF[allignment$REF == ""] <- "-"
allignment$SPEC[allignment$SPEC == ""] <- "-"
## cut exons from df sequence
exon.pos <- subset(exon.pos, exon.pos$chromosome_name == chr)
# creat list of exon sequences (vectors)
exon.pos.list <- list()
for (i in 1:nrow(exon.pos)){
exon.pos.list[[i]] <- seq(from = exon.pos$exon_chrom_start[i], to = exon.pos$exon_chrom_end[i])
}
exon.pos.list <- unlist(exon.pos.list)
# cut all positions within exons
seq.exon.cut <- allignment$POS[!allignment$POS %in% exon.pos.list]
seq.exon.cut <- data.table(POS = seq.exon.cut)
allignment <- allignment[seq.exon.cut, on = "POS", nomatch = 0]
rm(seq.exon.cut)
## cut exon POS from annotations
ant <- ant[, c("POS", "REF", "ALT"), with = FALSE]
test1 <- allignment[allignment$POS %in% ant$POS,]
test2 <- ant[ant$POS %in% test1$POS,]
test3 <- cbind(test1, test2)
View(test3)
tmp <- test3[1:10,]
View(tmp)
fwrite(tmp, "../../Sandbox/no_match_chr22.csv")
tmp <- ant[ant$POS == 15282428,]
View(tmp)
head(ant)
tmp <- ant[ant$POS == 16050115,]
View(tmp)
tmp <- allignment[allignment$POS == 15927902,]
View(tmp)
rm(list = ls())
### test
allignment_in_path = "/Volumes/Untitled/PC_constraint/Paper/Data/Ensembl_alignments/"
annotation_in_path = "~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/VEP/Formatted_output/"
allignment_in_file = "Human_chimpanzee_alignment_chr"
annotation_in_file = "H_1000GP_QCed_VEP_all_chr"
seq_out_path = "/Volumes/Untitled/PC_constraint/Paper/Data/Ancestral_mutant/"
SNV_out_path = "/Volumes/Untitled/PC_constraint/Paper/Data/Ancestral_mutant/"
seq_out_file = "H_ancestral_mutant_SEQ_chr"
SNV_out_file = "H_ancestral_mutant_SNP_chr"
exon.pos = H_exon.pos
chr = 22
colnames_ant =  c("CHROM", "POS", "ID", "REF", "ALT", "QUAL", "FILTER", "AC", "Gene", "Feature", "Feature_type",
"Consequence", "IMPACT", "SYMBOL", "SYMBOL_SOURCE", "BIOTYPE", "CANONICAL", "CCDS", "AF")
### RUN FOR HUMAN
H_exon.pos <- fread("~/Dropbox/BitBucket_repos/phd/PC_constraint/Paper/Data/Ensembl/H_exon_POS.csv")
exon.pos = H_exon.pos
# sequence allignment
allignment_file_path <- paste0(allignment_in_path, allignment_in_file, chr, ".txt")
allignment <- fread(allignment_file_path)
# sequence allignment
allignment_file_path <- paste0(allignment_in_path, allignment_in_file, chr, ".txt")
allignment <- fread(allignment_file_path)
test <- allignment[allignment$POS == 50805735,]
View(test)
test <- allignment[allignment$POS == 50805777,]
View(test)
test <- allignment[allignment$POS == 50805809,]
View(test)
rm(list=ls())
rm(list = ls())
graphics.off()
library(data.table)
library(dplyr)
### function that returns all possible kmers and middle base substitutions
kmer_changes <- function(kmer){
tmp <- do.call(CJ, replicate(n = kmer, expr = c("A", "C", "G", "T"), FALSE))
from <- do.call(paste, c(tmp, sep=""))
tmp$V2 <- "A"
to.A <- do.call(paste, c(tmp, sep=""))
tmp$V2 <- "C"
to.C <- do.call(paste, c(tmp, sep=""))
tmp$V2 <- "G"
to.G <- do.call(paste, c(tmp, sep=""))
tmp$V2 <- "T"
to.T <- do.call(paste, c(tmp, sep=""))
from <- rep(from, 4)
to <- c(to.A, to.C, to.G, to.T)
out <- data.table(from, to)
out <- out[-which(out$from == out$to),]
out <- out[order(out$from),]
colnames(out) <- paste0("k", kmer, "_", colnames(out))
return(out)
}
### FUNCTION that counts k3mers in sequence
count_5mer <- function(anc.SEQ, k5_all){
b1 <- anc.SEQ[1:(length(anc.SEQ)-4)]
b2 <- anc.SEQ[2:(length(anc.SEQ)-3)]
b3 <- anc.SEQ[3:(length(anc.SEQ)-2)]
b3 <- anc.SEQ[4:(length(anc.SEQ)-1)]
b3 <- anc.SEQ[5:(length(anc.SEQ))]
tri.total.temp <- paste(b1, b2, b3, b4, b5, sep = "")
tri.total.temp <- tri.total.temp[!grepl("-", tri.total.temp)]
tri.total.temp <- data.frame(table(tri.total.temp))
colnames(tri.total.temp) <- c(colnames(k3_all), "count")
tri.total <- merge(k5_all, tri.total.temp, all = T)
return(tri.total)
}
### FUNCTION that counts k5mer subsetitutions from ancestral to mutant sequence
count_5mer_sub <- function(anc.SEQ, mu.SEQ, k5_mu_all){
# identify SNV POS
SNV.POS <- which(anc.SEQ != mu.SEQ)
# remove SNV at fist or last base
rm.id <- c((1:2), (length(anc.SEQ)-1:length(anc.SEQ)))
SNV.POS <- SNV.POS[!SNV.POS %in% rm.id]
if (length(SNV.POS) != 0){
# identify ancestral kmer
b1 <- anc.SEQ[SNV.POS - 2]
b2 <- anc.SEQ[SNV.POS - 1]
b3 <- anc.SEQ[SNV.POS]
b4 <- anc.SEQ[SNV.POS + 1]
b5 <- anc.SEQ[SNV.POS + 2]
tri.from <- paste(b1, b2, b3, b4, b5, sep = "")
# identify mutant kmer
b1 <- anc.SEQ[SNV.POS - 2]
b2 <- anc.SEQ[SNV.POS - 1]
b3 <- mu.SEQ[SNV.POS]
b4 <- anc.SEQ[SNV.POS + 1]
b5 <- anc.SEQ[SNV.POS + 2]
tri.to <- paste(b1, b2, b3, b4, b5, sep = "")
# remove all indicies in tri.from and tri.to that contain chrs other than ACGT or nchar != 5
# tri.to <- tri.to[!grepl("-", tri.to)]
mu.count.temp <- data.frame(tri.from, tri.to)
mu.count.temp <- data.frame(table(mu.count.temp))
mu.count.temp <- mu.count.temp[mu.count.temp$Freq != 0, ]
colnames(mu.count.temp) <- c("k5_from", "k5_to", "count")
mu.count <- merge(k5_mu_all, mu.count.temp, all = T)
return(mu.count)
} else {
k5_mu_all$count <- 0
return(k5_mu_all)
}
}
### FUNCTION that calculates 3mer relative substitution rates
k5_mu_rr <- function(chr, in_file_path){
# Initiate output lists
k5_mu_count_list <- list()
k5_total_list <- list()
# Identify all possible 3-mer substitutions
k5_mu_all <- kmer_changes(5)
k5_all <- data.table(k5_from = unique(k5_mu_all$k5_from))
# count by chromosome
for(i in 1:length(chr)){
### IMPORT
in_seq_path <- paste0(in_file_path, chr[i], ".txt")
df.seq <- fread(in_seq_path)
# df.snp <- fread("/Volumes/Untitled/PC_constraint/Paper/Data/Ancestral_mutant/M_ancestral_mutant_SNP_chr19.txt")
colnames(df.seq) <- c("POS", "ANCESTRAL", "MUTANT")
# colnames(df.snp) <- c("POS", "ANCESTRAL", "MUTANT")
### Split into vectors of sequential POS
ANCESTRAL <- split(df.seq$ANCESTRAL, cumsum(c(TRUE, diff(df.seq$POS)!=1)))
MUTANT <- split(df.seq$MUTANT, cumsum(c(TRUE, diff(df.seq$POS)!=1)))
### Remove vectors with bases < 5
ANCESTRAL <- ANCESTRAL[lapply(ANCESTRAL, length) >= 5]
MUTANT <- MUTANT[lapply(MUTANT, length) >= 5]
### Count 3-mers in ancestral sequence
kmer5_totals <- lapply(ANCESTRAL, count_5mer, k5_all = k5_all)
# sum all counts in list
k5_total_list[[i]] <- rowSums(sapply(kmer5_totals, `[[`, 2), na.rm = TRUE)
### Count the 3-mer substitutions with mutant sequence
kmer5_sub_totals <- list()
for (j in 1:length(ANCESTRAL)){
kmer5_sub_totals[[j]] <- count_5mer_sub(anc.SEQ = ANCESTRAL[[j]],
mu.SEQ = MUTANT[[j]],
k5_mu_all = k5_mu_all)
# print(j)
}
# sum all counts in list
k5_mu_count_list[[i]] <- rowSums(sapply(kmer5_sub_totals, `[[`, 3), na.rm = TRUE)
print(paste("chr", chr[i], "done!"))
}
# Sum total kmer across chromosomes
k5_total <- do.call(cbind, k5_total_list)
k5_total <- apply(k5_total, 1, sum, na.rm = T)
k5_total <- data.frame(k5_from = k5_all$k3_from,
k5_from_N = k5_total)
# Sum total kmer changes across chromosomes
k5_mu_total <- do.call(cbind, k5_mu_count_list)
k5_mu_total <- apply(k5_mu_total, 1, sum, na.rm = T)
k5_mu_total <- data.frame(k5_from = k5_mu_all$k5_from,
k5_to = k5_mu_all$k5_to,
k5_mu_N = k5_mu_total)
### Calculate relative mu rates
k5_out <- merge(k5_mu_total, k5_total, all = T)
k5_out$p_any_snp_given_k5 <- NA
for (ii in 1:nrow(k5_out)){
k5_out$p_any_snp_given_k5[ii] <- sum(k5_out$k5_mu_N[k5_out$k5_from == k5_out$k5_from[ii]])/k5_out$k5_from_N[ii]
}
k5_out$p_snp_given_k5 <- NA
for (ii in 1:nrow(k5_out)){
k5_out$p_snp_given_k5[ii] <- k5_out$k5_mu_N[ii]/sum(k5_out$k5_mu_N[k5_out$k5_from == k5_out$k5_from[ii]])
}
k5_out$k5_mu_rr <- NA
for (ii in 1:nrow(k5_out)){
k5_out$k5_mu_rr[ii] <- k5_out$k5_mu_N[ii]/k5_out$k5_from_N[ii]
}
print(paste("CHROMOSOME", chr[i], "DONE!", sep = " "))
return(k5_out)
}
chr <- c(1:19, "X")
in_file_path   <- "/Volumes/Untitled/PC_constraint/Paper/Data/Ancestral_mutant/M_ancestral_mutant_SEQ_chr"
# Initiate output lists
k5_mu_count_list <- list()
k5_total_list <- list()
# Identify all possible 3-mer substitutions
k5_mu_all <- kmer_changes(5)
k5_all <- data.table(k5_from = unique(k5_mu_all$k5_from))
i <- 1
### IMPORT
in_seq_path <- paste0(in_file_path, chr[i], ".txt")
df.seq <- fread(in_seq_path)
in_file_path   <- "/Volumes/HarEx/PC_constraint/Paper/Data/Ancestral_mutant/M_ancestral_mutant_SEQ_chr"
### IMPORT
in_seq_path <- paste0(in_file_path, chr[i], ".txt")
df.seq <- fread(in_seq_path)
# df.snp <- fread("/Volumes/Untitled/PC_constraint/Paper/Data/Ancestral_mutant/M_ancestral_mutant_SNP_chr19.txt")
colnames(df.seq) <- c("POS", "ANCESTRAL", "MUTANT")
### Split into vectors of sequential POS
ANCESTRAL <- split(df.seq$ANCESTRAL, cumsum(c(TRUE, diff(df.seq$POS)!=1)))
MUTANT <- split(df.seq$MUTANT, cumsum(c(TRUE, diff(df.seq$POS)!=1)))
### Remove vectors with bases < 5
ANCESTRAL <- ANCESTRAL[lapply(ANCESTRAL, length) >= 5]
MUTANT <- MUTANT[lapply(MUTANT, length) >= 5]
### Count 3-mers in ancestral sequence
kmer5_totals <- lapply(ANCESTRAL, count_5mer, k5_all = k5_all)
# sum all counts in list
k5_total_list[[i]] <- rowSums(sapply(kmer5_totals, `[[`, 2), na.rm = TRUE)
anc.SEQ <- ANCESTRAL[[1]]
mu.SEQ <_ MUTANT[[1]]
mu.SEQ <- MUTANT[[1]]
# identify SNV POS
SNV.POS <- which(anc.SEQ != mu.SEQ)
# remove SNV at fist or last base
rm.id <- c((1:2), (length(anc.SEQ)-1:length(anc.SEQ)))
SNV.POS <- SNV.POS[!SNV.POS %in% rm.id]
# identify SNV POS
SNV.POS <- which(anc.SEQ != mu.SEQ)
# remove SNV at fist or last base
rm.id <- c((1:2), (length(anc.SEQ)-1:length(anc.SEQ)))
# remove SNV at fist or last base
rm.id <- c((1:2), ((length(anc.SEQ)-1):length(anc.SEQ)))
SNV.POS <- SNV.POS[!SNV.POS %in% rm.id]
if (length(SNV.POS) != 0){
# identify ancestral kmer
b1 <- anc.SEQ[SNV.POS - 2]
b2 <- anc.SEQ[SNV.POS - 1]
b3 <- anc.SEQ[SNV.POS]
b4 <- anc.SEQ[SNV.POS + 1]
b5 <- anc.SEQ[SNV.POS + 2]
tri.from <- paste(b1, b2, b3, b4, b5, sep = "")
# identify mutant kmer
b1 <- anc.SEQ[SNV.POS - 2]
b2 <- anc.SEQ[SNV.POS - 1]
b3 <- mu.SEQ[SNV.POS]
b4 <- anc.SEQ[SNV.POS + 1]
b5 <- anc.SEQ[SNV.POS + 2]
tri.to <- paste(b1, b2, b3, b4, b5, sep = "")
# remove all indicies in tri.from and tri.to that contain chrs other than ACGT or nchar != 5
# tri.to <- tri.to[!grepl("-", tri.to)]
mu.count.temp <- data.frame(tri.from, tri.to)
mu.count.temp <- data.frame(table(mu.count.temp))
mu.count.temp <- mu.count.temp[mu.count.temp$Freq != 0, ]
colnames(mu.count.temp) <- c("k5_from", "k5_to", "count")
mu.count <- merge(k5_mu_all, mu.count.temp, all = T)
return(mu.count)
} else {
k5_mu_all$count <- 0
return(k5_mu_all)
}
### FUNCTION that counts k5mer subsetitutions from ancestral to mutant sequence
count_5mer_sub <- function(anc.SEQ, mu.SEQ, k5_mu_all){
# identify SNV POS
SNV.POS <- which(anc.SEQ != mu.SEQ)
# remove SNV at fist or last base
rm.id <- c((1:2), ((length(anc.SEQ)-1):length(anc.SEQ)))
SNV.POS <- SNV.POS[!SNV.POS %in% rm.id]
if (length(SNV.POS) != 0){
# identify ancestral kmer
b1 <- anc.SEQ[SNV.POS - 2]
b2 <- anc.SEQ[SNV.POS - 1]
b3 <- anc.SEQ[SNV.POS]
b4 <- anc.SEQ[SNV.POS + 1]
b5 <- anc.SEQ[SNV.POS + 2]
tri.from <- paste(b1, b2, b3, b4, b5, sep = "")
# identify mutant kmer
b1 <- anc.SEQ[SNV.POS - 2]
b2 <- anc.SEQ[SNV.POS - 1]
b3 <- mu.SEQ[SNV.POS]
b4 <- anc.SEQ[SNV.POS + 1]
b5 <- anc.SEQ[SNV.POS + 2]
tri.to <- paste(b1, b2, b3, b4, b5, sep = "")
# remove all indicies in tri.from and tri.to that contain chrs other than ACGT or nchar != 5
# tri.to <- tri.to[!grepl("-", tri.to)]
mu.count.temp <- data.frame(tri.from, tri.to)
mu.count.temp <- data.frame(table(mu.count.temp))
mu.count.temp <- mu.count.temp[mu.count.temp$Freq != 0, ]
colnames(mu.count.temp) <- c("k5_from", "k5_to", "count")
mu.count <- merge(k5_mu_all, mu.count.temp, all = T)
return(mu.count)
} else {
k5_mu_all$count <- 0
return(k5_mu_all)
}
}
### Count 3-mers in ancestral sequence
kmer5_totals <- lapply(ANCESTRAL, count_5mer, k5_all = k5_all)
### FUNCTION that counts k5mers in sequence
count_5mer <- function(anc.SEQ, k5_all){
b1 <- anc.SEQ[1:(length(anc.SEQ)-4)]
b2 <- anc.SEQ[2:(length(anc.SEQ)-3)]
b3 <- anc.SEQ[3:(length(anc.SEQ)-2)]
b3 <- anc.SEQ[4:(length(anc.SEQ)-1)]
b3 <- anc.SEQ[5:(length(anc.SEQ))]
tri.total.temp <- paste(b1, b2, b3, b4, b5, sep = "")
tri.total.temp <- tri.total.temp[!grepl("-", tri.total.temp)]
tri.total.temp <- data.frame(table(tri.total.temp))
colnames(tri.total.temp) <- c(colnames(k5_all), "count")
tri.total <- merge(k5_all, tri.total.temp, all = T)
return(tri.total)
}
### FUNCTION that counts k5mer subsetitutions from ancestral to mutant sequence
count_5mer_sub <- function(anc.SEQ, mu.SEQ, k5_mu_all){
# identify SNV POS
SNV.POS <- which(anc.SEQ != mu.SEQ)
# remove SNV at fist or last base
rm.id <- c((1:2), ((length(anc.SEQ)-1):length(anc.SEQ)))
SNV.POS <- SNV.POS[!SNV.POS %in% rm.id]
if (length(SNV.POS) != 0){
# identify ancestral kmer
b1 <- anc.SEQ[SNV.POS - 2]
b2 <- anc.SEQ[SNV.POS - 1]
b3 <- anc.SEQ[SNV.POS]
b4 <- anc.SEQ[SNV.POS + 1]
b5 <- anc.SEQ[SNV.POS + 2]
tri.from <- paste(b1, b2, b3, b4, b5, sep = "")
# identify mutant kmer
b1 <- anc.SEQ[SNV.POS - 2]
b2 <- anc.SEQ[SNV.POS - 1]
b3 <- mu.SEQ[SNV.POS]
b4 <- anc.SEQ[SNV.POS + 1]
b5 <- anc.SEQ[SNV.POS + 2]
tri.to <- paste(b1, b2, b3, b4, b5, sep = "")
# remove all indicies in tri.from and tri.to that contain chrs other than ACGT or nchar != 5
# tri.to <- tri.to[!grepl("-", tri.to)]
mu.count.temp <- data.frame(tri.from, tri.to)
mu.count.temp <- data.frame(table(mu.count.temp))
mu.count.temp <- mu.count.temp[mu.count.temp$Freq != 0, ]
colnames(mu.count.temp) <- c("k5_from", "k5_to", "count")
mu.count <- merge(k5_mu_all, mu.count.temp, all = T)
return(mu.count)
} else {
k5_mu_all$count <- 0
return(k5_mu_all)
}
}
### FUNCTION that counts k5mers in sequence
count_5mer <- function(anc.SEQ, k5_all){
b1 <- anc.SEQ[1:(length(anc.SEQ)-4)]
b2 <- anc.SEQ[2:(length(anc.SEQ)-3)]
b3 <- anc.SEQ[3:(length(anc.SEQ)-2)]
b4 <- anc.SEQ[4:(length(anc.SEQ)-1)]
b5 <- anc.SEQ[5:(length(anc.SEQ))]
tri.total.temp <- paste(b1, b2, b3, b4, b5, sep = "")
tri.total.temp <- tri.total.temp[!grepl("-", tri.total.temp)]
tri.total.temp <- data.frame(table(tri.total.temp))
colnames(tri.total.temp) <- c(colnames(k5_all), "count")
tri.total <- merge(k5_all, tri.total.temp, all = T)
return(tri.total)
}
### FUNCTION that counts k5mer subsetitutions from ancestral to mutant sequence
count_5mer_sub <- function(anc.SEQ, mu.SEQ, k5_mu_all){
# identify SNV POS
SNV.POS <- which(anc.SEQ != mu.SEQ)
# remove SNV at fist or last base
rm.id <- c((1:2), ((length(anc.SEQ)-1):length(anc.SEQ)))
SNV.POS <- SNV.POS[!SNV.POS %in% rm.id]
if (length(SNV.POS) != 0){
# identify ancestral kmer
b1 <- anc.SEQ[SNV.POS - 2]
b2 <- anc.SEQ[SNV.POS - 1]
b3 <- anc.SEQ[SNV.POS]
b4 <- anc.SEQ[SNV.POS + 1]
b5 <- anc.SEQ[SNV.POS + 2]
tri.from <- paste(b1, b2, b3, b4, b5, sep = "")
# identify mutant kmer
b1 <- anc.SEQ[SNV.POS - 2]
b2 <- anc.SEQ[SNV.POS - 1]
b3 <- mu.SEQ[SNV.POS]
b4 <- anc.SEQ[SNV.POS + 1]
b5 <- anc.SEQ[SNV.POS + 2]
tri.to <- paste(b1, b2, b3, b4, b5, sep = "")
# remove all indicies in tri.from and tri.to that contain chrs other than ACGT or nchar != 5
# tri.to <- tri.to[!grepl("-", tri.to)]
mu.count.temp <- data.frame(tri.from, tri.to)
mu.count.temp <- data.frame(table(mu.count.temp))
mu.count.temp <- mu.count.temp[mu.count.temp$Freq != 0, ]
colnames(mu.count.temp) <- c("k5_from", "k5_to", "count")
mu.count <- merge(k5_mu_all, mu.count.temp, all = T)
return(mu.count)
} else {
k5_mu_all$count <- 0
return(k5_mu_all)
}
}
### Count 3-mers in ancestral sequence
kmer5_totals <- lapply(ANCESTRAL, count_5mer, k5_all = k5_all)
rm(list = ls())
graphics.off()
